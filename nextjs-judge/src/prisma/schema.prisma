// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String     @id @default(cuid())
  name               String?
  email              String?    @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  userName           String?   
  eventsParticipated Event[]
  questionSolved     Question[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  INSANE
}

model Question {
  id          Int        @id @default(autoincrement())
  problemName String     @unique
  description String
  difficulty  Difficulty
  companies   String[]
  maang       Boolean
  users       User[]
  eventAsked  Event[]
}

model Host {
  id           Int     @id @default(autoincrement())
  hostName     String
  hostUsername String  @unique
  Events       Event[]
}

enum EVENT_STATUS {
  COMPLETED
  ONGOING
  UPCOMING
}

model Event {
  id               String       @id
  eventName        String
  description      String
  hosts            Host[]
  completed        EVENT_STATUS @default(COMPLETED)
  date             DateTime     @db.Date
  particpants      User[]
  questionAsked    Question[]
  noOfParticipants Int
  image            String       @default("")
  baseColor        String       @default("")
}
